package org.edithor.cliente;

import javax.swing.JTextArea;
import javax.swing.text.Caret;

/**
 *
 * @author Antonio
 */
public class VentanaCliente extends javax.swing.JFrame {

    /**
     * Creates new form VentanaCliente
     */
    public VentanaCliente() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaEditor = new javax.swing.JTextArea();
        jSplitPane2 = new javax.swing.JSplitPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAreaChat = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        txtAreaEditor.setColumns(20);
        txtAreaEditor.setRows(5);
        jScrollPane1.setViewportView(txtAreaEditor);

        jSplitPane1.setLeftComponent(jScrollPane1);

        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        txtAreaChat.setColumns(20);
        txtAreaChat.setRows(5);
        jScrollPane2.setViewportView(txtAreaChat);

        jSplitPane2.setTopComponent(jScrollPane2);

        jSplitPane1.setRightComponent(jSplitPane2);

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 530, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTextArea txtAreaChat;
    private javax.swing.JTextArea txtAreaEditor;
    // End of variables declaration//GEN-END:variables

    public JTextArea getTxtAreaEditor() {
        return txtAreaEditor;
    }

    /**
     * Obtiene la posici√≥n del caret
     *
     * @return
     */
    public int getCaretPositionEditor() {
        return txtAreaEditor.getCaretPosition();
    }

    /**
     * Obtiene el texto del editor
     *
     * @return
     */
    public String getTextoEditar() {
        return txtAreaEditor.getText();
    }

    /**
     * Establece el texto del editor
     *
     * @param texto
     */
    public void setTextoEditar(String texto) {
        txtAreaEditor.setText(texto);
    }

    /**
     * Establece el dot del editor
     *
     * @param dot
     */
    public void setDotAreaEditor(int dot) {
        txtAreaEditor.getCaret().setDot(dot);
    }
    
    public int getDotAreaEditor(){
        return txtAreaEditor.getCaret().getDot();
    }

    /**
     * Agrega un mensaje al area de chat
     * @param mensaje 
     */
    public void agregaMensajeChat(String mensaje) {
        txtAreaChat.append(mensaje + "\n");
    }
}
